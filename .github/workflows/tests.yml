name: Tests

on:
  # Add the triggers as required
  push:
    branches:
      - '**'

  pull_request:
    branches:
      - '**'
  schedule:
    # * is a special character in YAML so you have to quote this string
    # This example triggers the workflow every day at 6:00 and 18:00 UTC:
    - cron:  '0 6,18 * * *'

env:
  LT_USERNAME: ${{ secrets.LT_USERNAME }}
  LT_ACCESS_KEY: ${{ secrets.LT_ACCESS_KEY }}

jobs:
  # smart-ui:
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       node-version: [18.x]

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 10
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - run: npm install
  #     - run: npm run build --if-present

  #     - name: Step for push event
  #       run: |
  #         echo "This is a push event!"
  #         echo "The latest commitId $(git log -1 --format='%H')"
  #         echo "COMMIT_ID=$(git log -1 --format='%H')" >> $GITHUB_ENV
  #       if: github.event_name == 'push'

  #     - name: Step for pull_request event
  #       run: |
  #         echo "This is a pull_request event!"
  #         git log -n 5 --format="%H %an %s" | while read line; do echo "$line"; done
  #         echo "The latest commitId $(git log -n 2 --format='%H' | tail -n 1)"
  #         echo "COMMIT_ID=$(git log -n 2 --format='%H' | tail -n 1)" >> $GITHUB_ENV
  #       if: github.event_name == 'pull_request'

  #     - name: Create Github URL
  #       run: |
  #         API_HOST=https://api.github.com
  #         echo "The latest commitId is $COMMIT_ID"
  #         GITHUB_URL=$API_HOST/repos/$GITHUB_REPOSITORY/statuses/$COMMIT_ID
  #         echo "GITHUB_URL: $GITHUB_URL"
  #         echo "GITHUB_URL=$GITHUB_URL" >> $GITHUB_ENV

  #     - name: Execute PW SmartUI Test
  #       run: npm run test-smartui

  # pw-single:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [18.x]

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 20
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - run: npm install
  #     - run: npm run build --if-present

  #     - name: Execute PW Single Test
  #       run: npm run test

  # pw-parallel:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [18.x]

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 10
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - run: npm install
  #     - run: npm run build --if-present

  #     - name: Execute PW Parallel Tests
  #       run: npm run test-parallel

  # pw-android:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [18.x]

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 10
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - run: npm install
  #     - run: npm run build --if-present

  #     - name: Execute PW Android Real Device Test
  #       run: npm run test-android

  # pw-extension:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [18.x]

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 10
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - run: npm install
  #     - run: npm run build --if-present

  #     - name: Execute PW Extension Test
  #       run: npm run test-extension

  # pw-iphone-emulation:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [18.x]

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 10
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - run: npm install
  #     - run: npm run build --if-present

  #     - name: Execute PW iPhone Emulation Test
  #       run: npm run test-iPhone-emulation

  # pw-lighthouse:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [18.x]

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 10
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - run: npm install
  #     - run: npm run build --if-present

  #     - name: Execute PW LightHouse Test
  #       run: npm run test-lighthouse-report

  # pw-cucumber-js:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./playwright-cucumber-js
  #   strategy:
  #     matrix:
  #       node-version: [18.x]

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 10
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - run: npm install

  #     - name: Execute PW Cucumber JS Test
  #       run: npm run test

  # pw-java:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./playwright-java

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 10

  #     - name: Execute PW Java Test
  #       run: mvn -Dexec.mainClass="com.lambdatest.PlaywrightTestSingle" -Dexec.classpathScope=test test-compile exec:java

  # pw-java-junit:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./playwright-java-junit

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 10

  #     - name: Execute PW Java JUnit Test
  #       run: mvn clean test

  # pw-jest-js:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./playwright-jest-js
  #   strategy:
  #     matrix:
  #       node-version: [18.x]

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 10
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - run: npm install

  #     - name: Execute PW Cucumber Jest Test
  #       run: npm test

  pw-test-js:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./playwright-test-js
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 10
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install

      - name: Execute PW Test JS
        run: npm run test